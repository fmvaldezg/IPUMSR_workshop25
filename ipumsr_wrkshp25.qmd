---
title: "Analyzing Demographic Data with IPUMS and R"
author: "Felipe Valdez"
format: 
  revealjs:
    logo: ./img/tulibraries_logo.png
---

```{r}
options(repos = c(CRAN = "https://cran.r-project.org"))

```


## Workshop agenda

- What is IPUMS? What kind of data can I access?
- Getting started with ipumsr
- Demo: Racial Inequity in Homeownership in Pennsylvania:
1. Extracting data
2. Downloading data
3. Analyzing data
4. Mapping data


# What is IPUMS?

## Integrated Public Use Microdata Series


:::::::{.columns}

:::::{.column width="50%"}
- Harmonized census and survey data from around the world
- Minnesota Population Center at the University of Minnesota
:::::

:::::{.column width="50%"}
![impums.org](./img/products.png)
:::::

::::::


## How to access IPUMS data

::::::{.columns}

:::::{.column}
- Direct download from web portal
- API (Application Programming Interface)
- API packages: **ipumsr** and **ipumspy**
:::::

:::::{.column}
![](./img/download.png)
:::::

::::::

# Getting started with **IPUMSR**

## {.invisible}

:::::{.columns}

::::{.column width="50%"}

- R package
- Read files downloaded from the IPUMS
- Request data, download files, and get metadata

::::

::::{.column width="50%"}
![](./img/ipumsr_logo.png)
::::

:::::

## Why Use ipumsr?

- Simplifies data import
- Keeps variable labels and metadata
- Supports microdata and GIS data
- Works well with tidyverse and sf

## Requierements..1

1. Install/setup your IDE
![](./img/ides.png)

2. Create an IPUMS account [here](https://account.ipums.org/user/new)

![](./img/register.png)

## Requirements..2

3. Get an IPUMS API key: Login to your account > Go to `View/create API key` > Copy your key (you will use it later)

![](https://raw.githubusercontent.com/fmvaldezg/IPUMSR_workshop25/main/img/key.gif)

## Requirements..3

4. Install the package

```{r, echo=TRUE, output=FALSE}
install.packages("ipumsr")
```

5. Load the library
```{r, echo=TRUE}
library(ipumsr)
```

6. Save your API key in the environment
```{.r}
set_ipums_api_key("paste-your-api-key-here", save = TRUE)
```

## {.invisible}

![](./img/options.png)

## Basic functions

- `read_nhgis()` when you downloaded data to your device
- `define_extract_nhgis()` to specify the data you want to request
- `submit_extract()` submits the extract request via the API
- `download_extract()` downloads the data to your computer
- `ipums_var_info()` get contextual information about variables

# Demo: How is the homeownership by race in Pennsylvania?

## Exploring the NHGIS datasets

```{r echo=TRUE, output=TRUE}
nhgis_data <- get_metadata_nhgis("datasets")
nhgis_data
```

## Filtering the results

```{r, echo=TRUE, output=FALSE}
install.packages("dplyr")
```


```{r, echo=TRUE, output=TRUE}
library(dplyr)
nhgis_data |>
filter(group == "2023 American Community Survey") |>
select(name, description)
```

## Exploring the dataset metadata

```{r, echo=TRUE}
ds_meta <- get_metadata_nhgis(dataset = "2019_2023_ACS5a")
ds_meta
```

## Exploring all tables

```{r, echo=TRUE, output=TRUE}
ds_meta$data_tables
```

## {.invisible}

![](./img/data_tables.png)

## Finding the correct tables

```{r, echo=TRUE, output=FALSE}
install.packages("stringr")
```

```{r, echo=TRUE, output=TRUE}
library(stringr)
ds_meta$data_tables |>
filter(str_detect(description, "Tenure"))
```

## Define a data extract

```{.r code-line-numbers="2-6"}
define_extract_nhgis(
  description = "", #name of the extract
  datasets = NULL, #chosen datasets see ds_spec() below
  time_series_tables = NULL, #time series (only if aplicable)
  shapefiles = NULL, # include if you are going to map
  geographic_extents = NULL,
  breakdown_and_data_type_layout = NULL,
  tst_layout = NULL,
  data_format = NULL
)
```

```{.r}
ds_spec(
  name,
  data_tables = NULL, # specific data tables
  geog_levels = NULL, # aggregation level
  years = NULL, # specific years
  breakdown_values = NULL
)
```

## Define a data extract

```{r, echo=TRUE, output=TRUE}
my_extract <- define_extract_nhgis(
  description = "Homeownership by race, PA",
  datasets = ds_spec(
    "2019_2023_ACS5a",
    data_tables = c("B25003B", "B25003H", "B25003I"),
    geog_levels = "county"
    ),
  shapefiles = "us_county_2023_tl2023", # explore available shapefiles in IPUMS website
)
```

## Submiting and downloading

```{.r}
my_extract <- submit_extract(my_extract)
my_extract <- wait_for_extract(my_extract)
my_extract <- download_extract(my_extract)
```

## Reading the files

```{r, echo=TRUE, output=TRUE}
nhgis_data <- read_nhgis("nhgis0013_csv.zip")
spatial_data <- read_ipums_sf("nhgis0013_shape.zip")
```

## Exploring our data

```{r, echo=TRUE, output=TRUE}
colnames(nhgis_data)
```

```{r, echo=TRUE, output=TRUE}
ipums_var_info(nhgis_data$ASTHE001)
```

## {.invisible}

- We get multiple tables in one. 
- Remember, each variable has a code
- Example: Tenure (White Alone, Not Hispanic or Latino Householder) B25003H

```{r, echo=TRUE, output=TRUE}
variables <- get_metadata_nhgis(dataset = "2019_2023_ACS5a", data_table = "B25003H")
variables$variables
```

## Calculating the proportion of owners by race

```{r, echo=TRUE, output=TRUE}
nhgis_data <- nhgis_data |>
mutate(
ho_prop_white = ASTHE002 / ASTHE001,
ho_prop_black = ASTBE002 / ASTBE001,
ho_prop_hispanic = ASTIE002 / ASTIE001
)|>
mutate(
ho_ratio_white_blac = ho_prop_white / ho_prop_black,
ho_ratio_white_hispanic = ho_prop_white / ho_prop_hispanic,
)|>
select(YEAR, STATEA, STATE, COUNTYA, COUNTY, GISJOIN, starts_with("ho_ratio")) |>
  filter(STATEA==42)
```

## Joining the data

```{r, echo=TRUE, output=TRUE}
for_mapping <- ipums_shape_inner_join(nhgis_data, spatial_data, by = "GISJOIN")
```

You can also use:

- `ipums_shape_left_join()` 
- `ipums_shape_right_join()`
- `ipums_shape_full_join()`

## Preparing mapping packages

- ggplot allows to create multiple types of visualizations
```{r echo=TRUE, output=FALSE}
install.packages("ggplot2")
library(ggplot2)
```

- `sf` is a package to manage spatial formats
```{.r}
install.packages("sf")
library(sf)
```

## Creating a simple map

```{r}
ggplot(data = for_mapping, aes(fill = ho_ratio_white_hispanic)) + 
  geom_sf()
```

## Improving the map

```{r, echo=TRUE, output=TRUE}
ggplot(data = for_mapping, aes(fill = ho_ratio_white_hispanic)) + 
  geom_sf() + 
  scale_fill_distiller(palette = "YlOrRd", 
                       direction = 1) + 
  labs(title = "Homeownership ratio white/hispanic, PA, 2023",
       caption = "Data source: 2022 5-year ACS, US Census Bureau",
       fill = "Ratio") + 
  theme_void()
```

## Creating an interactive map with `mapgl()`

```{r, echo=TRUE, output=TRUE}
install.packages("mapgl")
library(mapgl)
maplibre()
```

```{r, echo=TRUE, output=FALSE}
pa_map <- maplibre(bounds=for_mapping)
```

## Mapping

```{r, echo=TRUE, output=FALSE}
pa_map |> 
  add_fill_layer(
  id = "homeowner",
  source = for_mapping,
  fill_color = interpolate(
    column = "ho_ratio_white_hispanic",
    values = c(1, 3),
    stops = c("lightyellow", "darkorange"),
    na_color = "lightgrey"
  ),
  fill_opacity = 0.7
 ) |> 
  add_legend(
    "Homeownership ratio white/hispanic, PA, 2023",
    values = c(1, 3),
    colors = c("lightyellow", "darkorange")
  )
```

## {.invisible}

```{r, echo=FALSE, output=TRUE}
pa_map |> 
  add_fill_layer(
  id = "homeowner",
  source = for_mapping,
  fill_color = interpolate(
    column = "ho_ratio_white_hispanic",
    values = c(1, 3),
    stops = c("lightyellow", "darkorange"),
    na_color = "lightgrey"
  ),
  fill_opacity = 0.7
 ) |> 
  add_legend(
    "Homeownership ratio white/hispanic, PA, 2023",
    values = c(1, 3),
    colors = c("lightyellow", "darkorange")
  )
```